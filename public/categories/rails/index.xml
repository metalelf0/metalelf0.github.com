<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rails on metalelf0.github.io</title>
    <link>https://metalelf0.github.io/categories/rails/</link>
    <description>Recent content in Rails on metalelf0.github.io</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 May 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://metalelf0.github.io/categories/rails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mocked - a minitest pattern</title>
      <link>https://metalelf0.github.io/posts/old-website/2016-05-11-mocked-a-minitest-pattern/</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      <guid>https://metalelf0.github.io/posts/old-website/2016-05-11-mocked-a-minitest-pattern/</guid>
      <description>&lt;h3 id=&#34;minitest-is-good-for-mocking-right-well&#34;&gt;Minitest is good for mocking, right? Well&amp;hellip;&lt;/h3&gt;&#xA;&lt;p&gt;Minitest is gaining a lot of popularity and can actually be a 100% replacement&#xA;for RSpec. It&amp;rsquo;s a pure ruby testing framework, it&amp;rsquo;s fast, light weight, and it&#xA;supports both a test-unit like syntax and a spec engine with Rspec like syntax.&lt;/p&gt;&#xA;&lt;p&gt;Still, when it comes to mocking, it can be a little painful. You have to&#xA;initialize mocks and verify them manually after running the code under test.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Command pattern in ruby and rails</title>
      <link>https://metalelf0.github.io/posts/old-website/2016-05-02-command-pattern/</link>
      <pubDate>Mon, 02 May 2016 00:00:00 +0000</pubDate>
      <guid>https://metalelf0.github.io/posts/old-website/2016-05-02-command-pattern/</guid>
      <description>&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;&#xA;&lt;p&gt;If you have a growing Rails application and you feel your models are getting too&#xA;fat you might have a problem. We&amp;rsquo;ve all been educated with the &amp;ldquo;fat models, thin&#xA;controllers&amp;rdquo; dogma - but sometimes putting all the domain logic inside the&#xA;models has its downsides.&lt;/p&gt;&#xA;&lt;p&gt;As an example, the typical flow of an &lt;code&gt;ActiveRecord&lt;/code&gt; object through a Rails&#xA;request involves:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fetching the object from the DB based on the params you receive (controller);&lt;/li&gt;&#xA;&lt;li&gt;doing something with the object inside the model (model);&lt;/li&gt;&#xA;&lt;li&gt;when something goes wrong, you set errors onto the model attributes (model);&lt;/li&gt;&#xA;&lt;li&gt;you finally return the object to the view, and present it accordingly (view).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This is gonna tangle a lot of the domain logic to your model (scopes to&#xA;retrieve objects, validations, and in the worst case even some presentation&#xA;logic).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Null objects in Rails</title>
      <link>https://metalelf0.github.io/posts/old-website/2013-12-23-null-objects-in-rails/</link>
      <pubDate>Mon, 23 Dec 2013 00:00:00 +0000</pubDate>
      <guid>https://metalelf0.github.io/posts/old-website/2013-12-23-null-objects-in-rails/</guid>
      <description>&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;&#xA;&lt;p&gt;Recently I&amp;rsquo;ve seen in a project I work on a lot of occurrences of this code:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;privacy &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;privacy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enables_page?(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;The first part of the condition above is a bad practice in object oriented&#xA;design. It forces collaborators of &lt;code&gt;user&lt;/code&gt; to know a part of its implementation&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;it could have a &lt;code&gt;privacy&lt;/code&gt; or it couldn&amp;rsquo;t.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;what-we-want&#34;&gt;What we want&lt;/h3&gt;&#xA;&lt;p&gt;Wouldn&amp;rsquo;t it be much better to just write this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;privacy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enables_page?(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;Hiding the responsibility inside the user class? It would be much cleaner and&#xA;follow the &lt;strong&gt;Tell, don&amp;rsquo;t ask&lt;/strong&gt; principle.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Easily change the path for your Paperclip attachments</title>
      <link>https://metalelf0.github.io/posts/old-website/2012-12-10-easily-change-the-path-for-your-paperclip-attachments/</link>
      <pubDate>Mon, 10 Dec 2012 00:00:00 +0000</pubDate>
      <guid>https://metalelf0.github.io/posts/old-website/2012-12-10-easily-change-the-path-for-your-paperclip-attachments/</guid>
      <description>&lt;p&gt;Today after releasing an app to production environment I saw a couple of&#xA;&lt;a href=&#34;https://github.com/thoughtbot/paperclip&#34;&gt;paperclip&lt;/a&gt; warnings like this&#xA;in my production.log file:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;[paperclip] Duplicate URL for round_image with /system/:attachment/:id/:style/:filename. This will clash with attachment defined in PageElements::FranchisingCarouselEntry class&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This happens because I defined an attachment with the same name in two&#xA;different models, and the default strategy Paperclip uses to choose&#xA;attachment locations could lead to filename clashing.&lt;/p&gt;&#xA;&lt;p&gt;Here is a more detailed example:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Howto share Spree authentication/authorization engine</title>
      <link>https://metalelf0.github.io/posts/old-website/2012-03-02-howto-share-spree-authenticationauthorization-engine/</link>
      <pubDate>Fri, 02 Mar 2012 00:00:00 +0000</pubDate>
      <guid>https://metalelf0.github.io/posts/old-website/2012-03-02-howto-share-spree-authenticationauthorization-engine/</guid>
      <description>&lt;p&gt;In a project I&amp;rsquo;m working on I&amp;rsquo;m using spree as a mountable engine. The&#xA;host application has its own administration area, and I wanted to share&#xA;the spree authentication with my app.&lt;/p&gt;&#xA;&lt;p&gt;Spree uses devise to handle authentication. The code which is&#xA;responsible for the authentication part of the app is in the auth module&#xA;of Spree.&lt;/p&gt;&#xA;&lt;p&gt;To share authentication with your application you have to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;setup devise in your routes.rb file. I copied this code from the&#xA;routes.rb file included in the spree/auth module:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HostApplication&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Application&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;routes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;draw &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  devise_for &lt;span style=&#34;color:#e6db74&#34;&gt;:user&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#e6db74&#34;&gt;:class_name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Spree::User&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#e6db74&#34;&gt;:controllers&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;:sessions&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;spree/user_sessions&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               &lt;span style=&#34;color:#e6db74&#34;&gt;:registrations&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;spree/user_registrations&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               &lt;span style=&#34;color:#e6db74&#34;&gt;:passwords&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;spree/user_passwords&amp;#39;&lt;/span&gt; },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#e6db74&#34;&gt;:skip&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:unlocks&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:omniauth_callbacks&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#e6db74&#34;&gt;:path_names&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;:sign_out&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;logout&amp;#39;&lt;/span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;add &lt;code&gt;before_filter :authenticate_user!&lt;/code&gt; to the controller you want to&#xA;be protected.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This way you&amp;rsquo;re setup with authentication; it&amp;rsquo;s time to move on with&#xA;authorization.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using virtual attributes for multi parameter form helpers in Rails</title>
      <link>https://metalelf0.github.io/posts/old-website/2011-10-28-using-virtual-attributes-for-multi-parameter-form-helpers-in-rails/</link>
      <pubDate>Fri, 28 Oct 2011 00:00:00 +0000</pubDate>
      <guid>https://metalelf0.github.io/posts/old-website/2011-10-28-using-virtual-attributes-for-multi-parameter-form-helpers-in-rails/</guid>
      <description>&lt;p&gt;In a Rails application I am working on, I needed to setup a form with a field with a non-standard behaviour. The field represents a &lt;code&gt;Date&lt;/code&gt; object, so the &lt;code&gt;date_select&lt;/code&gt; &lt;code&gt;FormHelper&lt;/code&gt; looked great; however, the date to display was not the actual date to be set on the database, but the day before. Changing all the data on the DB was a bit risky, so I had to stick with this requirement.&#xA;I decided to use a virtual attribute to do this, as it seemed the most elegant solution, so I wrote this in my model:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Machinist vs Factory Girl: Machinist win!</title>
      <link>https://metalelf0.github.io/posts/old-website/2011-06-19-machinist-vs-factory-girl-machinist-win/</link>
      <pubDate>Sun, 19 Jun 2011 00:00:00 +0000</pubDate>
      <guid>https://metalelf0.github.io/posts/old-website/2011-06-19-machinist-vs-factory-girl-machinist-win/</guid>
      <description>&lt;p&gt;Today I decided to verify if &lt;a href=&#34;https://github.com/notahat/machinist&#34;&gt;Machinist&lt;/a&gt; could be a good replacement for &lt;a href=&#34;https://github.com/thoughtbot/factory_girl&#34;&gt;Factory Girl&lt;/a&gt;. In our project, we have a big problem with Factory Girl: even if you tell her not to hit the database, using the &lt;code&gt;Factory.build&lt;/code&gt; method, if an object has associations, these are saved on the DB. And this causes a huge slowdown in specs using factories. We&amp;rsquo;ve been using Factory Girl for nearly two years, and if we could find a way to stop him hitting the DB, we could really have a huge improvent in our test suite running time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Howto run a rake task in sandbox mode</title>
      <link>https://metalelf0.github.io/posts/old-website/2011-03-10-howto-run-a-rake-task-in-sandbox-mode/</link>
      <pubDate>Thu, 10 Mar 2011 00:00:00 +0000</pubDate>
      <guid>https://metalelf0.github.io/posts/old-website/2011-03-10-howto-run-a-rake-task-in-sandbox-mode/</guid>
      <description>&lt;p&gt;If you have a Rails rake task that somehow changes your DB data, but you want to be sure that the DB will be rolled back to its previous state after the rake task has completed, you can simply include this snippet right after your task definition:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Base&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;increment_open_transactions&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Base&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;begin_db_transaction&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;at_exit &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Base&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rollback_db_transaction&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Base&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decrement_open_transactions&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you wonder where is this code coming from, it&amp;rsquo;s directly from the rails console code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rails 3 scopes with HABTM (has and belongs to many) relations</title>
      <link>https://metalelf0.github.io/posts/old-website/2011-01-28-rails-3-scopes-with-habtm-has-and-belongs-to-many-relations/</link>
      <pubDate>Fri, 28 Jan 2011 00:00:00 +0000</pubDate>
      <guid>https://metalelf0.github.io/posts/old-website/2011-01-28-rails-3-scopes-with-habtm-has-and-belongs-to-many-relations/</guid>
      <description>&lt;p&gt;There are already many posts about this, but maybe this simple example will help you understand this subject even better.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# First model: tag.rb&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# note that pomodori is a custom plural for pomodoro&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Tag&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Base&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  has_and_belongs_to_many &lt;span style=&#34;color:#e6db74&#34;&gt;:pomodori&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Second model: pomodoro.rb&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# here is how to define a Rails 3 scope through the join table:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pomodoro&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Base&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  has_and_belongs_to_many &lt;span style=&#34;color:#e6db74&#34;&gt;:tags&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  scope &lt;span style=&#34;color:#e6db74&#34;&gt;:by_tag&lt;/span&gt;, lambda { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;tag_text&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     joins(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;join pomodori_tags, tags&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     where(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pomodori.id = pomodori_tags.pomodoro_id &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            AND pomodori_tags.tag_id = tags.id &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            AND tags.text = ?&amp;#39;&lt;/span&gt;, tag_text) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Format the results of a MySQL query like MySQL! In Rails!</title>
      <link>https://metalelf0.github.io/posts/old-website/2010-09-30-format-the-results-of-a-mysql-query-like-mysql-in-rails/</link>
      <pubDate>Thu, 30 Sep 2010 00:00:00 +0000</pubDate>
      <guid>https://metalelf0.github.io/posts/old-website/2010-09-30-format-the-results-of-a-mysql-query-like-mysql-in-rails/</guid>
      <description>&lt;p&gt;It may happen that you need to display the results of a MySQL query on a page. E.g., your customer asks you to add a report on a page, and you don&amp;rsquo;t want to build a custom template, but just write the query and see the results.&lt;/p&gt;&#xA;&lt;p&gt;We can do this easily thanks to the terminal-table gem (see &lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;http://github.com/visionmedia/terminal-table&#34;&gt;http://github.com/visionmedia/terminal-table&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;). This gem allows printing an ASCII table, just like the one you see when you use MySQL from the terminal. Look at its page on GitHub to see how easy it is.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

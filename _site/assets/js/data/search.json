[ { "title": "The github pages DNS takeover incident", "url": "/posts/github-pages-dns-takeover/", "categories": "posts, technical", "tags": "github, dns, security", "date": "2024-12-30 10:00:00 +0100", "snippet": "This website, andreaschiavini.com, is hosted on GitHub Pages. The domain is registered on Namecheap, and the integration was done following instructions on this gist.Last week, I received an email ...", "content": "This website, andreaschiavini.com, is hosted on GitHub Pages. The domain is registered on Namecheap, and the integration was done following instructions on this gist.Last week, I received an email from Google saying that some users had been added as property owners of my Google Search Console property. This raised an eyebrow, and I checked my website. Instead of my website, it showed some sort of slot machine scam website.The first thing I checked was my DNS settings. They were correct, and checking via dig apparently reported no issue:‚ûú dig +noall +answer +nocmd andreaschiavini.comandreaschiavini.com. 1800 IN A 185.199.108.153andreaschiavini.com. 1799 IN A 185.199.109.153andreaschiavini.com. 1799 IN A 185.199.110.153andreaschiavini.com. 1799 IN A 185.199.111.153‚ûú dig +noall +answer +nocmd www.andreaschiavini.comwww.andreaschiavini.com. 856 IN CNAME metalelf0.github.io.metalelf0.github.io. 856 IN A 185.199.109.153metalelf0.github.io. 856 IN A 185.199.111.153metalelf0.github.io. 856 IN A 185.199.110.153metalelf0.github.io. 856 IN A 185.199.108.153After a quick check with the support folks from namecheap, which excluded any DNS issue, I switched to the github side.My website is a static blog built using hugo and deployed via github actions. Considering I‚Äôm using a custom theme, I suspected something might have happened on the javascript side, e.g. some external javascript that was included by the theme and accidentally got hacked to perform a redirect. However, inspecting the site loading reported that the first call (the GET / call) was already returning the scam website, so before any javascript was loaded and executed.Github actions also weren‚Äôt ran since the last deploy, that happened more than a month ago, so I excluded them from my analysis.I needed to check if everything was right on the github pages side. I opened my github pages repository settings and checked for the custom domains section. My custom domain was not there anymore. This was kinda strange, I thought, cause I already added and validated it. I tried adding it back but I got an error: The custom domain andreaschiavini.com is already taken. If you are the owner of this domain, check out https://docs.github.com/pages/configuring-a-custom-domain-for-your-github-pages-site/verifying-your-custom-domain-for-github-pages for information about how to verify and release this domain.When we register a custom domain for a Google Pages website, we are advised to verify the domain. This process involves adding a TXT record generated by GitHub to the DNS configuration. GitHub then checks the DNS information, and once it finds the expected TXT record, it confirms the domain as validated.I did this the first time I set up the integration, but I carelessly removed the TXT record afterwards. This exposed my domain to be added by a malicious user and bound to another GitHub Pages website.The important bit to notice here is how GitHub handles adding custom domains, which was not entirely clear to me: when you add a custom domain, GitHub just checks that the domain DNS records are set up correctly to point to the GitHub IPs (A records); when you validate a domain, GitHub checks for the presence of the TXT record and verifies its content.So, after removing the TXT record by accident, all the attacker could do was add the domain to their GitHub repo, but they clearly couldn‚Äôt validate it (they would have needed access to my Namecheap account for that).The solution at this point was pretty straightforward: I validated my domain from my GitHub profile settings, went through the procedure to add back the given TXT record, and once this was done successfully, I could add my custom domain to my GitHub Pages repository settings." }, { "title": "Build a neovim menu without external dependencies", "url": "/posts/build-a-neovim-menu/", "categories": "posts, technical", "tags": "neovim, lua, tutorial", "date": "2024-11-16 21:41:49 +0100", "snippet": "Wow, it‚Äôs been quite a long time since my last post. I‚Äôm still a vim addict, but I moved to neovim in the recent years, and today I wanna share a quick trick that you might find useful.I‚Äôm going to...", "content": "Wow, it‚Äôs been quite a long time since my last post. I‚Äôm still a vim addict, but I moved to neovim in the recent years, and today I wanna share a quick trick that you might find useful.I‚Äôm going to build a custom interactive menu with custom options. I‚Äôll use it to access some files whose location I often forget, but you‚Äôll see how easy it is to customize it to do anything you want. And the best part is, you don‚Äôt need any external plugin to use it :)Here‚Äôs an example of how it‚Äôs looking:And here‚Äôs the code, which I‚Äôll explain line by line:local M = {}local core = require(\"lib/core\")M.commands = {}M.commands.EditNeovimConfig = {\tcommand = \":e \" .. core.get_configdir() .. \"/init.lua\",\tdescription = \"ÓöÆ Edit neovim config\",}M.commands.EditBatConfig = { command = \":e ~/.config/bat/config\", description = \"ü¶á Edit bat config\"}M.commands.EditInbox = { command = \":e ~/iCloud-Obsidian/work/inbox.md\", description = \"üì• Inbox\"}M.commands.EditKittyConfig = { command = \":e ~/.config/kitty/kitty.conf\", description = \"üê± Edit kitty config\"}M.commands.EditLazygitConfig =\t{ command = \":e ~/Library/Application Support/lazygit/config.yml\", description = \"üî± Edit lazygit config\"}M.commands.EditWeztermConfig =\t{ command = \":e ~/.config/wezterm/wezterm.lua\", description = \"üîß Edit Wezterm config\"}M.commands.EditGhosttyConfig = { command = \":e ~/.config/ghostty/config\", description = \"üëª Edit Ghostty config\"}M.commands.SourceCurrentLuaFile = { command = \":luafile %\", description = \"üèÑ Lua: source current file\"}M.run = function()\tvim.ui.select(vim.tbl_keys(M.commands), {\t\tprompt = \"Whattya wanna do?\",\t\tformat_item = function(item)\t\t\treturn M.commands[item].description\t\tend,\t}, function(choice)\t\tlocal chosen_command = M.commands[choice]\t\tvim.cmd(chosen_command.command)\tend)endreturn MThis is a classic Lua module. I saved it under lua/user/quick-menu.lua in my neovim config dir.To show the available commands, get the user input and execute the chosen command, we‚Äôre going to use the vim.ui.select function from neovim.As you can see in the documentation (:h vim.ui.select()), here‚Äôs what this function does:vim.ui.select({items}, {opts}, {on_choice}) *vim.ui.select()* Prompts the user to pick from a list of items, allowing arbitrary (potentially asynchronous) work until `on_choice`.The documentation also gives us an example:vim.ui.select({ 'tabs', 'spaces' }, { prompt = 'Select tabs or spaces:', format_item = function(item) return \"I'd like to choose \" .. item end,}, function(choice) if choice == 'spaces' then vim.o.expandtab = true else vim.o.expandtab = false endend)So, we need: a set of options to be picked (in the example, tabs and spaces); a format_item function that takes an item as an input and returns a string description of the option; a function to be executed once choice has been picked.If we have just a couple options, it‚Äôs fine to inline them as in the example; but if we need something more complicated, like in our menu, a custom data structure will be handy. So, we‚Äôre going to define a M.commands table, where each row will include the command to be executed when chosen, and the description to be displayed to the user.Our module will also expose a run method that will be responsible of calling vim.ui.select and bind our table to make everything work.Let‚Äôs look at the run method again:M.run = function()\tvim.ui.select(vim.tbl_keys(M.commands), {\t\tprompt = \"Whattya wanna do?\",\t\tformat_item = function(item)\t\t\treturn M.commands[item].description\t\tend,\t}, function(choice)\t\tlocal chosen_command = M.commands[choice]\t\tvim.cmd(chosen_command.command)\tend)endThe list of available options to be displayed can be extracted from the M.commands table with vim.tbl_keys, an utility function that extracts keys from a lua table. This will return the list of keys in the M.commands table, so EditNeovimConfig, EditKittyConfig and so on.The next step is to write the format_item function, that will take an item (e.g. EditNeovimConfig) and will need to return its description. It‚Äôs pretty easy, as we just need to read the M.commands[item] row and get its description.Finally, once the user has picked a command, we need to execute it. Every command in our M.commands is a vimscript command that can be executed with the vim.cmd shorthand, so reading it and executing is pretty straightforward.Now that everything is in place, we just need to setup a key binding to trigger the menu. I have this under &lt;Leader&gt;hL, and here‚Äôs how to do it:vim.keymap.set(\"n\", \"&lt;leader&gt;hL\", function()\trequire(\"user.quick-menu\").run()end, { desc = \"Quick menu\" })Put this in any neovim config file, restart neovim and you will be ready to go!I hope everything is clear, feel free to ask in the comments below if you need any further info.Thanks for your time!" }, { "title": "Vim - Change Colorscheme Based on Iterm profile", "url": "/posts/change-vim-colorscheme-based-on-iterm/", "categories": "posts, technical", "tags": "vim, neovim", "date": "2016-12-19 00:00:00 +0100", "snippet": "I like to change my (neo)vim colorscheme quite frequently, and when I do I want it to match my iterm colors. Many colorscheme authors also provide an iterm color palette, so you can import the .ite...", "content": "I like to change my (neo)vim colorscheme quite frequently, and when I do I want it to match my iterm colors. Many colorscheme authors also provide an iterm color palette, so you can import the .itermcolors file, create a new iterm profile with that palette, start a new session and you have the same vim colorscheme in your iterm. But then, when you launch vim, you still have to type :colorscheme somecolor.If you have many colorschemes - like I do - you might become bored of doing all of this every frickin time. Wouldn‚Äôt it be really cool if, when launching vim from within an iterm session with profile ‚Äúsolarized‚Äù, then the solarized vim colorscheme could be used automatically?This is possible and this is what I put together to achieve it. The trick is to use the $ITERM_PROFILE environment variable - iterm sets it when you launch a new session. You can then change colorscheme based on that variable if you name iterm profiles and vim colorschemes the same way.\" colors = array with names of available colorschemeslet colors = ['PaperColor', 'crayon', 'oceanicnext', 'gruvbox', 'solarized', 'hemisu', 'apprentice', 'jellybeans', 'wombat', 'monochrome', 'alduin', 'sierra', 'dracula', 'one', 'tender', 'ir_black', 'base16-eighties']if $ITERM_PROFILE != \"\" \" if the current ITERM_PROFILE environment is in the list of supported \" colorschemes... if index(colors, $ITERM_PROFILE) != -1 \" set it as current colorscheme color $ITERM_PROFILE \" check for a setup file for the colorscheme (e.g. Airline theme, \" term colors etc.) if filereadable( $HOME . \"/.config/nvim/setup/color-\" . $ITERM_PROFILE. \".vim\" ) source $HOME/.config/nvim/setup/color-$ITERM_PROFILE.vim endif \" support for -dark / -light variants \" if ITERM_PROFILE ends with -dark or -light, and the rest of the word is in the \" list of supported colorschemes...\" elseif index(colors, substitute($ITERM_PROFILE, '-dark\\|-light', '', '')) != -1 \" baseColor: 'solarized-dark' =&gt; 'solarized' let baseColor = substitute($ITERM_PROFILE, '-dark\\|-light', '', '') \" variant: 'solarized-dark' =&gt; 'dark' let variant = substitute($ITERM_PROFILE, baseColor . '-', '', '') exe \"color \".baseColor exe \"set bg=\".variant \" check for a setup file for the colorscheme (e.g. Airline theme, \" term colors etc.) if filereadable( $HOME . \"/.config/nvim/setup/color-\" . $ITERM_PROFILE . \".vim\" ) source $HOME/.config/nvim/setup/color-$ITERM_PROFILE.vim endif endifelse \" otherwise, just use the default colorscheme - apprentice color apprentice source $HOME/.config/nvim/setup/color-apprentice.vimendifJust add the code above to your init.vim file and you‚Äôre all set. I reckon this might not be the best vimscript ever, so if you have any suggestion - or you‚Äôve found a better way to achieve the same results - drop a line!" }, { "title": "Vim - sort ruby methods by name", "url": "/posts/vim-sort-ruby-methods-by-name/", "categories": "posts, technical", "tags": "vim, ruby", "date": "2016-07-29 02:00:00 +0200", "snippet": "Yesterday I had to refactor a very large ruby class. It had a lot of methods and, to make it cleaner, I decided to sort methods alphabetically.Is there a way to do this in vim? Of course there is, ...", "content": "Yesterday I had to refactor a very large ruby class. It had a lot of methods and, to make it cleaner, I decided to sort methods alphabetically.Is there a way to do this in vim? Of course there is, and it‚Äôs quite tricky - so let‚Äôs see how we can do it.The basic idea is taken from this post on wincent.com, I just adapted it for ruby. All credits to this guy for his work :)We‚Äôll use the same approach of the original post: first we‚Äôll collapse each ruby method on a single line, using a defined pattern to replace line terminators. We‚Äôll proceed sorting the one-lined methods, and finally we‚Äôll expand them back to multi-line.These are the three commands, we‚Äôll explain them in detail later::'&lt;,'&gt;g/\\vdef\\ /,/\\v^\\s*end$/ s/$\\n/@@@:'&lt;,'&gt;sort:'&lt;,'&gt;s/@@@/\\r/gLet‚Äôs do it step by step.1. Collapsing on a single lineFirst, we visually select the methods we want to sort, and issue this command::'&lt;,'&gt;g/\\vdef\\ /,/\\v^\\s*end$/ s/$\\n/@@@This will apply a global command on every instance of a defined pattern inside our visual selection. Look at the documentation inside vim for global commands (:help :g):*:g* *:global* *E147* *E148*:[range]g[lobal]/{pattern}/[cmd]Execute the Ex command [cmd] (default \":p\") on thelines within [range] where {pattern} matches.So, our range is '&lt;,'&gt; (this means from &lt; mark to &gt; mark, in other words from the beginning of the visual selection to its end); our pattern is \\vdef\\ /,/\\v^\\s*end$/. This means everything from def\\ (a def followed by a space) to \\^s*end$ (a line starting with any number of spaces, followed by end and the end of line)./,/ is how range beginning and end are separated; the \\v is used to toggle the very magic mode, which allows a less verbose regexp syntax (see :help \\v for more info).Finally, our Ex command cmd is s/$\\n/@@@. It‚Äôs a simple substitution: replace each line ending with our defined pattern, @@@.2. Sorting collapsed linesThis is easy. Just visually select the collapsed lines and issue:'&lt;,'&gt;sort3. Expand lines back with line returnsAgain, select the sorted lines (you can use gv to redo the last visual selection) and issue this command::'&lt;,'&gt;s/@@@/\\r/gThis is a simple substitution: it replaces our defined pattern, @@@, with a line return (\\r).I hope you‚Äôve learnt something from this article, I love that even after many years of vim usage I‚Äôm still surprised by its powerfulness every day. Have a good day!" }, { "title": "Mocked - a minitest pattern", "url": "/posts/mocked-a-minitest-pattern/", "categories": "posts, technical", "tags": "rails, ruby, oop, test, minitest", "date": "2016-05-11 02:00:00 +0200", "snippet": "Minitest is good for mocking, right? Well‚Ä¶Minitest is gaining a lot of popularity and can actually be a 100% replacement for RSpec. It‚Äôs a pure ruby testing framework, it‚Äôs fast, light weight, and ...", "content": "Minitest is good for mocking, right? Well‚Ä¶Minitest is gaining a lot of popularity and can actually be a 100% replacement for RSpec. It‚Äôs a pure ruby testing framework, it‚Äôs fast, light weight, and it supports both a test-unit like syntax and a spec engine with Rspec like syntax.Still, when it comes to mocking, it can be a little painful. You have to initialize mocks and verify them manually after running the code under test.A typical unit test with mocks looks something like this:test 'a pause can be completed' do datetime_service = MiniTest::Mock.new pause = MiniTest::Mock.new success = MiniTest::Mock.new failure = MiniTest::Mock.new now = DateTime.now datetime_service.expect(:datetime_now, now) pause.expect(:completed_at, nil) pause.expect(:update_attributes, true, [completed_at: now]) success.expect(:call, true, [\"Pause completed\", pause]) UseCases::Pauses::Complete.new.run(pause, datetime_service, success, failure) datetime_service.verify failure.verify success.verify pause.verifyendWhat I don‚Äôt like in the code above is the verbosity in the setup (and verification) of mock objects. I‚Äôm relying quite heavily on mocks, as I don‚Äôt want to pass real objects to my unit tests, and this kind of repetition is not good.Also I want to have a way to distinguish mock objects from ‚Äúreal‚Äù objects. This could help seeing if there is too much ‚Äúreal‚Äù stuff inside the test, or if I‚Äôm correctly mocking all the dependencies and collaborators of the method under test.What I came up with is Mocked, a small module to streamline these operations.# test/utils/mocked.rbmodule Mocked def add_mocks(*names) names.each { |name| add_mock(name) } end def add_mock(name) @mocks[name] = MiniTest::Mock.new end def mocked(name) @mocks[name] end def verify_mocks @mocks.each do |_, mock| mock.verify end end def setup_mocks @mocks = Hash.new endendAnd in the test_helper.rb file:# test/test_helper.rb#...require 'utils/mocked'# ...class ActiveSupport::TestCase include Mocked setup :setup_mocks teardown :verify_mocksendWe are just keeping an hash of mock objects, and verifying them on teardown of the test; we are also giving a mocked(mock_name) accessor to retrieve mock objects.With this we can rewrite the test above like this:test 'a pause can be completed' do add_mocks(:datetime_service, :pause, :success, :failure) now = DateTime.now mocked(:datetime_service).expect(:datetime_now, now) mocked(:pause).expect(:completed_at, nil) mocked(:pause).expect(:update_attributes, true, [completed_at: now]) mocked(:success).expect(:call, true, [\"Pause completed\", mocked(:pause)]) UseCases::Pauses::Complete.new.run( mocked(:pause), mocked(:datetime_service), mocked(:success), mocked(:failure) )endThe code looks better IMHO, and I like that if I decided - i.e. - to replace the pause mock with a real object it would read like:test 'a pause can be completed' do add_mocks(:datetime_service, :success, :failure) now = DateTime.now mocked(:datetime_service).expect(:datetime_now, now) pause = FactoryGirl.create(:pause, completed_at: nil) mocked(:success).expect(:call, true, [\"Pause completed\", pause]) UseCases::Pauses::Complete.new.run( pause, mocked(:datetime_service), mocked(:success), mocked(:failure) ) assert_equal now, pause.completed_atendHere you can clearly see at a first glance that the only real object is pause, whereas other objects are all mocked. It also really helps when refactoring tests.What do you think about this? Would you like to be built into a gem, do you have any suggestions or criticism on this? Let me know and have a great day!" }, { "title": "Command pattern in ruby and rails", "url": "/posts/command-pattern/", "categories": "posts, technical", "tags": "rails, ruby, oop, design, hexagonal, hanami", "date": "2016-05-02 02:00:00 +0200", "snippet": "The problemIf you have a growing Rails application and you feel your models are getting too fat you might have a problem. We‚Äôve all been educated with the ‚Äúfat models, thin controllers‚Äù dogma - but...", "content": "The problemIf you have a growing Rails application and you feel your models are getting too fat you might have a problem. We‚Äôve all been educated with the ‚Äúfat models, thin controllers‚Äù dogma - but sometimes putting all the domain logic inside the models has its downsides.As an example, the typical flow of an ActiveRecord object through a Rails request involves: fetching the object from the DB based on the params you receive (controller); doing something with the object inside the model (model); when something goes wrong, you set errors onto the model attributes (model); you finally return the object to the view, and present it accordingly (view).This is gonna tangle a lot of the domain logic to your model (scopes to retrieve objects, validations, and in the worst case even some presentation logic).The solutionsYou may be tempted at some point to throw it all away and just start over with a new solution. @jodosha is doing a great work with Hanami, (formerly Lotus), and it‚Äôs a great solution that you should consider if you‚Äôre starting a new project from scratch. Trailblazer is another project built on top of Rails with the aim of decoupling dependencies; however I found its documentation very lacking compared to the Hanami guides, but I didn‚Äôt buy their sponsored book, so YMMV.Anyway, if your Rails application is already in production, and you can‚Äôt afford a full rewrite, there is still hope - wear your refactoring hat and follow me.I‚Äôll show you a little piece of code to introduce a useful pattern: the command (or use case) pattern. This is gonna help you separating concerns in your application. Let‚Äôs take a look at some example code:class MultipleUseCase attr_reader :number, dividend def initialize(number, dividend) @number, @dividend = number, dividend end def run(success, failure) if number % dividend == 0 success.call(number, dividend) else failure.call(number, dividend, number % dividend) end endenddef fancy_puts(string) puts string.upcase!endMultipleUseCase.new(267434, 345).run( -&gt; (number, dividend) { fancy_puts \"#{number} is an exact multiple of #{dividend}\" }, -&gt; (number, dividend, remainder) { fancy_puts \"#{number} isn't an exact multiple of #{dividend}\\ (remainder is #{remainder})\" })What we have here is a MultipleUseCase class implementing the command pattern. It has a single public method - MultipleUseCase#run - which accepts two arguments: a success procedure and a failure procedure.As you see in the last block, we are passing two lambdas as arguments to the run method; one that will be called on a success scenario, and one that will be called in a failure scenario. This introduces a clear separation between domain logic (in the use case) and presentation logic.The latter, in this example, involves just building a simple string with some parameter interpolation; but it‚Äôs not inside the use case object. This allows us to reuse the use case anywhere and inject any presentation logic we want, like the fancy_puts method defined outside of the use case.Think about it: when you‚Äôre unit testing the use case, you can pass a mock object for each of the functions, and just ensure they are getting called with the correct parameters; if you are using the logic in a Rails controller, you can instead use - i.e. - the format methods to switch presentation logic depending on the requested format:# somewhere in a Rails controllerrespond_to do |format| MultipleUseCase.new(params[:dividend], params[:divisor]).run( -&gt; (number, dividend) { format.html { ... } format.json { ... } }, -&gt; (number, dividend, remainder) { format.html { ... } format.json { ... } } )endWhat else?This strategy won‚Äôt solve all your problems; if you have a lot of dependencies between AR models, you will still find a lot of framework-dependent code inside your use cases. If you wanna refactor further, you can consider introducing Repository objects to wrap all the persistency related logic.Also, you might decide to extract some reusable logic from the use cases into Service Objects.If this is not gonna be enough, well, maybe Rails is not the right tool for your job. I would suggest taking a look at the other frameworks I mentioned above instead of trying to force Rails to do something different. A heavily patched Rails application won‚Äôt be a Rails application anymore, and it will require a lot of tinkering to work with any gem built for Rails. Also, any Rails developer will need to learn how to use ‚Äúyour Rails‚Äù, instead of just using Rails. Using a framework like Hanami would be a far better solution, and you could also contribute to the development of a very promising ruby project.Let me know what you think and thanks for reading! :)" }, { "title": "Git: preview conflicts", "url": "/posts/git-preview-conflicts-without-touching-the-working-copy/", "categories": "posts, technical", "tags": "git", "date": "2014-07-12 02:00:00 +0200", "snippet": "Hi everyone!What we‚Äôre trying to tackle today is a very common problem, that I‚Äôm sure all of you encountered. Suppose you‚Äôre on your git feature branch, you want to merge it into another branch (be...", "content": "Hi everyone!What we‚Äôre trying to tackle today is a very common problem, that I‚Äôm sure all of you encountered. Suppose you‚Äôre on your git feature branch, you want to merge it into another branch (being it master, staging, production, whatever) and you‚Äôre asking yourself: will there be conflicts?.If you‚Äôre using Github, you can simply open the Pull Request page for your feature branch and look for the following box:This is informing you there will be no conflicts and a merge will run smooth.But what could you do if you didn‚Äôt use Github, or you were just too lazy to open it? Creating a new branch just to do the merge is a solution, but I was pretty sure git had something better to offer ;)The best solution I found here on StackOverflow is this: create the following git aliases in your ~/.gitconfig file:[alias] # check how the merge of dev into master will go: # git dry dev master dry = \"!f() { git merge-tree `git merge-base $2 $1` $2 $1; }; f\" # see if there will be any conflicts merging dev into master: # git conflicts dev master conflicts = \"!f() { git merge-tree `git merge-base $2 $1` $2 $1 | grep -A3 'changed in both'; }; f\"The first command will show the changelog for the merge of your feature branch into master:‚ï∞‚îÄ$ git dry feature_two stagingchanged in both base 100644 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 first_file our 100644 deba01fc8d98200761c46eb139f11ac244cf6eb5 first_file their 100644 dc1ff7f95ac4812480edad5ec13d4c1a20066377 first_file@@ -1 +1,5 @@+&lt;&lt;&lt;&lt;&lt;&lt;&lt; .our something+=======well, something else?+&gt;&gt;&gt;&gt;&gt;&gt;&gt; .theirThis is showing us there will be a conflict when trying to merge the feature_two branch into staging: the file first_file is changed in both the branches, and this will generate a conflict.The second command is just a shorthand that will limit the output to the lines related to the changed files, without the full changelog.‚ï∞‚îÄ$ git conflicts feature_two stagingchanged in both base 100644 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 first_file our 100644 deba01fc8d98200761c46eb139f11ac244cf6eb5 first_file their 100644 dc1ff7f95ac4812480edad5ec13d4c1a20066377 first_fileI hope you found this interesting, feel free to comment if you think it‚Äôs still improvable!" }, { "title": "Null objects in Rails", "url": "/posts/null-objects-in-rails/", "categories": "posts, technical", "tags": "rails, ruby, oop, design", "date": "2013-12-23 01:00:00 +0100", "snippet": "The problemRecently I‚Äôve seen in a project I work on a lot of occurrences of this code:if user.privacy &amp;&amp; user.privacy.enables_page?(...)The first part of the condition above is a bad pract...", "content": "The problemRecently I‚Äôve seen in a project I work on a lot of occurrences of this code:if user.privacy &amp;&amp; user.privacy.enables_page?(...)The first part of the condition above is a bad practice in object oriented design. It forces collaborators of user to know a part of its implementation - it could have a privacy or it couldn‚Äôt.What we wantWouldn‚Äôt it be much better to just write this:if user.privacy.enables_page?(...)Hiding the responsibility inside the user class? It would be much cleaner and follow the Tell, don‚Äôt ask principle.How to get thereThere are many ways to achieve this behaviour, but most of them will be based on The null object pattern. We want user.privacy to return an object which responds falsey to all the method of the original Privacy class.First solutionA trivial implementation could look like this:# null_privacy.rbclass NullPrivacy def enables_page? any_page false endendBut how we are going to tie this class to our User class? Strategies may change depending on your persistence layer. A one-fits-all solution is this: build an abstraction layer around your user.privacy relation.# user.rb has_one :_privacy def privacy _privacy || NullPrivacy.new end def privacy= privacy self._privacy = privacy endWhat we‚Äôre doing here is renaming the original privacy field to _privacy, so that we won‚Äôt call it directly, and we‚Äôre building two accessor methods to use User#privacy and User#privacy= as usual.Another solutionIf you want to keep things even simpler, you can model your Privacy class so that a new instance of this class behaves exactly like a NullPrivacy, and thus avoid the need of a NullPrivacy. Just keep in mind that things could change in your code in the future, so nail this down with a test before proceeding to avoid nasty surprises in the future.‚Ä¶ and MongoidFinally, if you are using Mongoid and you can model your Privacy class as described above, there‚Äôs a one-line solution: # user.rb has_one :privacy, autobuild: true" }, { "title": "Fluentd usage example with bash and ruby", "url": "/posts/fluentd-usage-example-with-bash-and-ruby/", "categories": "posts, technical", "tags": "ruby, logging, json, fluentd, bash, shell", "date": "2013-08-09 02:00:00 +0200", "snippet": " Fluentd is an open source tool to collect events and logs. Its architecture allows to easily collect logs from different input sources and redirect them to different output sinks. Some input exam...", "content": " Fluentd is an open source tool to collect events and logs. Its architecture allows to easily collect logs from different input sources and redirect them to different output sinks. Some input examples are HTTP, syslog, or apache logs, and some output sinks are files, mail, and databases (both RDBMS and NoSQL ones). Also, it allows to parse logs and to extract only the significative parts from each of them; saving this structured information on a DB allows much easier log searching and analysis.The fluentd architecture can be extended with ruby plugins to support input sources and output destinations; for the scope of this example, we will use: MongoDB plugin for Fluent event collector; fluent-logger rubygem; the built-in tcp input and stdout output.Installing fluentd serverThe first thing to do is installing the fluentd server. You can easily do this via rubygems (beware it requires at least ruby 1.9.2):$ gem install fluentdWhen you‚Äôre done you can create a setup file:$ fluentd -s ~/.fluentdThis will create the file ~/.fluentd/fluent.conf and setup the ~/.fluent/plugins folder.The fluentd.conf fileEdit the configuration file with your favourite editor (which is vim, of course), and make it look like this:## built-in TCP input## $ echo &lt;json&gt; | fluent-cat &lt;tag&gt;&lt;source&gt; type forward port 24224&lt;/source&gt;## match tag=fluentd.test.** and dump to console&lt;match fluentd.test.**&gt; type stdout&lt;/match&gt;&lt;match mongo.**&gt; type mongo host 127.0.0.1 port 27017 database fluentd collection test # for capped collection capped capped_size 1024m # flush flush_interval 1s&lt;/match&gt;You can see it‚Äôs made of three parts: The first one is the default HTTP source input. It listens for JSON messages on port 24224. The second one is the default standard output. The match fluentd.test.** line tells fluentd to forward all messages matching the given pattern to the chosen standard output. The third block is the MongoDB output. It requires the MongoDB plugin cited above to be installed, but we‚Äôll talk about this later.Let‚Äôs start the server and keep it running in foreground, to easily see incoming messages:$ fluentd -c ~/.fluent/fluent.confLogging from bash to STDOUTNow, let‚Äôs prepare a sample bash script to log things to fluentd. Open another terminal, create a bash script and paste the following content:#!/bin/shfluent_log(){ local project=\"$1\" local script_name=\"$2\" local message=\"$3\" echo \"{\\\"\"project\\\"\":\\\"\"$project\"\\\",\\\"\"script_name\\\"\":\\\"\"$script_name\"\\\",\\\"\"message\\\"\":\\\"\"$message\\\"\"}\" | fluent-cat fluentd.test.log}fluent_log \"Library\" \"Reload books\" \"Started\"As you can see I created a wrapper function to make it easier to redirect logs to fluentd. Save the file, make it executable and run it. You should see output like this in your server:2013-08-09 17:01:06 +0200 [trace]: plugin/in_forward.rb:150:initialize: accepted fluent socket object_id=701440240607202013-08-09 17:01:06 +0200 fluentd.test.log: {\"project\":\"Library\",\"script_name\":\"Reload books\",\"message\":\"Started\"}2013-08-09 17:01:06 +0200 [trace]: plugin/in_forward.rb:191:on_close: closed fluent socket object_id=70144024060720This is telling us that fluentd is accepting input from the fluent-cat command and it is redirecting it to standard output, according to the first rule.Logging from bash to MongoDBTo go on in our test, we need to install MongoDB. Use the best way depending on your system (I used homebrew on my mac), run it and connect to its console via the mongo command.Now, in the previous bash script, change the target of fluent-cat from fluentd.test.log to mongo.log. Save it, run it again, and type this in your MongoDB console:$ db.test.find()This time you should see an entry in the test collection:{ \"_id\" : ObjectId(\"5204dfee9f60b167da000004\"), \"project\" : \"Library\", \"script_name\" : \"Reload books\", \"message\" : \"Started\", \"time\" : ISODate(\"2013-08-09T12:26:22Z\") }Logging from ruby to MongoDBLet‚Äôs see how to achieve the same result in a ruby script. Install the fluent-logger rubygem with$ gem install fluent-loggerThen create a ruby script with the following content:#!/usr/bin/env rubyrequire 'rubygems'require 'fluent-logger'def fluent_log project, script_name, message Fluent::Logger::FluentLogger.open(nil, :host=&gt;'localhost', :port=&gt;24224) Fluent::Logger.post(\"mongo.log\", {:project =&gt; project, :script_name =&gt; script_name, :message =&gt; message })endfluent_log \"Library\", \"Update books\", \"Completed\"Run it, rerun the query in the MongoDB console, and a new entry should be present.{ \"_id\" : ObjectId(\"5204dfee9f60b167da000005\"), \"project\" : \"Library\", \"script_name\" : \"Reload books\", \"message\" : \"Completed\", \"time\" : ISODate(\"2013-08-09T12:46:32Z\") }Final considerationsThe ease of use of fluentd allows to quickly setup a centralized log system in just a few hours. You could use any tool you want to browse data in the MongoDB database. You can make elaborate statistics, build charts, and do everything you want with it. According to the fluentd website, its simple architecture allows it to run with very good performances: ‚ÄúFluentd‚Äôs performance has been proven in the field: its largest user currently collects logs from 5000+ servers, 5 TB of daily data, handling 50,000 msgs/sec at peak time.‚ÄùSo, I hope this post helped you to understand what this tool is about. I suggest you to check out the fluentd documentation to know more, it‚Äôs really complete and clear. If you found this post useful, feel free to drop me a line :)" }, { "title": "Easily change the path for your Paperclip attachments", "url": "/posts/easily-change-the-path-for-your-paperclip-attachments/", "categories": "posts, technical", "tags": "rails, ruby, paperclip", "date": "2012-12-10 01:00:00 +0100", "snippet": "Today after releasing an app to production environment I saw a couple of paperclip warnings like this in my production.log file:[paperclip] Duplicate URL for round_image with /system/:attachment/:i...", "content": "Today after releasing an app to production environment I saw a couple of paperclip warnings like this in my production.log file:[paperclip] Duplicate URL for round_image with /system/:attachment/:id/:style/:filename. Thiswill clash with attachment defined in PageElements::FranchisingCarouselEntry classThis happens because I defined an attachment with the same name in two different models, and the default strategy Paperclip uses to choose attachment locations could lead to filename clashing.Here is a more detailed example:class Foo has_attached_file :imageendclass Bar has_attached_file :imageendThe default strategy Paperclip uses to store attachments relies on this path: /system/:attachment/:id/:style/:filename.So, considering our example, if we uploaded two files called image.png for the first Foo instance and the first Bar instance, they would have the same path, /system/image/1/original/image.png.The solution is quite easy; if we add the following line to our config/environment.rb file, Paperclip will add an extra directory level to separate files across different models:# config/environment.rbPaperclip::Attachment.default_options[:url] = \"/system/:class/:attachment/:id/:style/:filename\"From now on Paperclip will search for files in the system/foo/image/1/original/image.png and system/bar/image/1/original/image.png locations. But we still need to move our previously uploaded files to the new path. We can do this with this rake task:desc \"Copy paperclip data\"task :copy_paperclip_data =&gt; :environment do def move_images klass, attachment_name print \"Moving #{attachment_name.pluralize} for #{klass}: \" instances = klass.find :all instances.each do |instance| file_name_method = attachment_name + \"_file_name\" unless instance.send(file_name_method).blank? filename = Rails.root.join('public', 'system', attachment_name.pluralize, instance.id.to_s, 'original', instance.send(file_name_method)) if File.exists? filename old_attachment_file = File.new filename instance.send(attachment_name + \"=\", old_attachment_file) instance.save old_attachment_file.close print \".\" end end end print \" [DONE]\" puts end move_images Foo, 'image' move_images Bar, 'image'endThis script is a slightly modified version of the one by Fernando Marcelo you can see here. I changed it a little to make it more verbose and reusable, but big credits go to him for his original work.Running this rake task with rake copy_paperclip_data will copy all the original files from their old location to the new one.You will still see the warning messages in your production.log file, because so far Paperclip is not smart enough to check your custom path and understand it is enough to prevent conflicts. This will probably be fixed in future releases of Paperclip gem." }, { "title": "Vim regexp example: make a variable out of params", "url": "/posts/vim-regexp-example/", "categories": "posts, technical", "tags": "vim, rails, ruby, regexp", "date": "2012-07-09 02:00:00 +0200", "snippet": "Today I wrote a regexp to change params[:page] into page. Here you are::'&lt;,'&gt;s/params\\[:\\(\\p\\{-}\\)\\]/\\1/gLet‚Äôs explain it briefly: the first part, :'&lt;,'&gt;s/, is the vim command to s...", "content": "Today I wrote a regexp to change params[:page] into page. Here you are::'&lt;,'&gt;s/params\\[:\\(\\p\\{-}\\)\\]/\\1/gLet‚Äôs explain it briefly: the first part, :'&lt;,'&gt;s/, is the vim command to substitute a pattern (or a regexp) with another one. The &lt;,'&gt; part tells vim to operate on the visually selected text. the second part is the trickiest one. Let‚Äôs see it part to part: params\\[: is the first part of the string we want to match. the \\ is used to escape the [ character. \\(\\p\\{-}\\) is the content between params[: and ]. It consists of a sequence of printable characters (\\p). The \\( and \\) characters around the sequence make it accessible to commands like substitute. I used the \\{-} quantifier instead of the \\+ because it is the non-greedy version; so, for example, if I had params[:page] = [ \"a\", \"b\", \"c\" ] Then \\p\\{-} would match only :page, while \\p\\+ would match :page] = [ \"a\", \"b\", \"c\" . the \\] part of the second block instructs the regexp parser to stop matching characters when it finds a ] char. The third part, \\1, tells vim what to replace with: the first match of the previous regexp. So, vim searches for the first \\( and reads until \\), matches this and uses it for the substitution. Finally, g tells vim to make a global change and not to stop after the first occurrence. " }, { "title": "Add bundle dir to your ctags", "url": "/posts/add-bundle-dir-to-your-ctags/", "categories": "posts, technical", "tags": "vim, rails, ctags, ruby", "date": "2012-03-26 02:00:00 +0200", "snippet": "Ctags are a great way to improve navigation between large codebases. Used together with vim they allow to quickly jump to any method definition with just a keystroke - C-]. Adding your bundle dir w...", "content": "Ctags are a great way to improve navigation between large codebases. Used together with vim they allow to quickly jump to any method definition with just a keystroke - C-]. Adding your bundle dir when generating the tags file will allow jumping to the internals of the ruby gems you are using. Let‚Äôs see how to do this.The setup needed is the following: install Exuberant Ctags. I suggest using brew install ctags, and remember to fix your $PATH so that running ctags --version shows Exuberant Ctags. From your project root directory build the tags file with ctags -R .. This will create a tags file in your dir. You can also run this command inside vim with :!ctags -R .. Now, from within vim, you can use the following shortcuts: C-] =&gt; jump to definition C-T =&gt; jump back from the definition C-W C-] =&gt; Open the definition in an horizontal split. Additional tricks can be found here.Now, to add the bundle dir, you have to ensure that you‚Äôre working with a rvm gemset for each project (sorry Ruby Rogues). Otherwise you could end up with different versions of each gem in your rvm gemset dir, and choosing the one to jump to would require a call to bundler.Then you can do this: run bundle show a_gem_in_your_project, e.g. bundle show rake copy the path including the rvm gem dir, like /Users/metalelf0/.rvm/gems/ruby-1.9.3-p0@my_project now run the ctags command passing this dir as an additional argument: ctags -R . /Users/metalelf0/.rvm/gems/ruby-1.9.3-p0@my_project Now from within vim you‚Äôll be able to jump to the source of the gems your project is using. Cool, right? :)" }, { "title": "Howto share Spree authentication/authorization engine", "url": "/posts/howto-share-spree-authenticationauthorization-engine/", "categories": "posts, technical", "tags": "spree, ruby, rails, devise, cancan", "date": "2012-03-02 01:00:00 +0100", "snippet": "In a project I‚Äôm working on I‚Äôm using spree as a mountable engine. The host application has its own administration area, and I wanted to share the spree authentication with my app.Spree uses devise...", "content": "In a project I‚Äôm working on I‚Äôm using spree as a mountable engine. The host application has its own administration area, and I wanted to share the spree authentication with my app.Spree uses devise to handle authentication. The code which is responsible for the authentication part of the app is in the auth module of Spree.To share authentication with your application you have to: setup devise in your routes.rb file. I copied this code from the routes.rb file included in the spree/auth module:HostApplication::Application.routes.draw do devise_for :user, :class_name =&gt; 'Spree::User', :controllers =&gt; { :sessions =&gt; 'spree/user_sessions', :registrations =&gt; 'spree/user_registrations', :passwords =&gt; 'spree/user_passwords' }, :skip =&gt; [:unlocks, :omniauth_callbacks], :path_names =&gt; { :sign_out =&gt; 'logout' } # ...end add before_filter :authenticate_user! to the controller you want to be protected.This way you‚Äôre setup with authentication; it‚Äôs time to move on with authorization. add load_and_authorize_resource! to the controller you want to be protected. register new abilities to the Spree CanCan configuration using the register_ability method. Here is an example: # create a file in config/initializers, e.g. add_abilities_to_spree.rb,# with the following content:Spree::Ability.register_ability MyAppAbility# create a file under app/models (or lib/) to define your abilities (in# this example I protect only the HostAppCoolPage model):class MyAppAbility include CanCan::Ability def initialize(user) if user.has_role?('admin') can manage, :host_app_cool_pages end endend add to your application_controller.rb file the code needed to handle authorization exceptions:class ApplicationController &lt; ActionController::Base protect_from_forgery def current_ability @current_ability ||= Spree::Ability.new(current_user) end rescue_from CanCan::AccessDenied do |exception| redirect_to :root, :alert =&gt; exception.message endendAnd you‚Äôre done!" }, { "title": "The right colors for your VIM", "url": "/posts/the-right-colors-for-your-vim/", "categories": "posts, technical", "tags": "vim, colorschemes, ruby", "date": "2012-02-06 01:00:00 +0100", "snippet": "I have a lot of Vim colorschemes, and I like to change them very often, reflecting my mood. I needed a way to showcase them all and quickly pick one.The original Vim Color Scheme Test script by mav...", "content": "I have a lot of Vim colorschemes, and I like to change them very often, reflecting my mood. I needed a way to showcase them all and quickly pick one.The original Vim Color Scheme Test script by maverick.woo is written in Perl and the build works on Windows systems. I wanted to add some new features, and to test it with my own colorschemes, but as I‚Äôm not very confident with Perl, I preferred to start over with a new Ruby version instead of forking his project. Here‚Äôs my version (and here‚Äôs the github page):The script loads all your colorschemes from your default vim directory (~/.vim/colors), and writes into the output dir an HTML file for each colorscheme, with a render of a Ruby file using this colorscheme. It also writes a different copy for each language present in the samples/ directory. It also builds an index page for each language, with a showcase of how the colorschemes render the sample code, a download link for each colorscheme and a nice lightbox to preview it.To run it, you‚Äôll need: ruby macvim tilt rubygem (to render the index template)What still needs to be done: Separate light and dark colorschemes Make this work with versions of vim different from MacVim Add the current language name to index pages Add more languages (currently only Ruby and Python are supported)ATM, the script uses a vim server named VIMCOLORS and sends it remote commands. This was made to make it faster, because opening a single macvim instance for each script required too much time. However, the --remote-send command of vim doesn‚Äôt wait for previous remote-sends to be completed, so I had to add a sleep 1 command in the script to prevent it from messing up the execution flow. Any hint to solve this is greatly appreciated." }, { "title": "Using virtual attributes for multi parameter form helpers in Rails", "url": "/posts/using-virtual-attributes-for-multi-parameter-form-helpers-in-rails/", "categories": "posts, technical", "tags": "rails, ruby", "date": "2011-10-28 02:00:00 +0200", "snippet": "In a Rails application I am working on, I needed to setup a form with a field with a non-standard behaviour. The field represents a Date object, so the date_select FormHelper looked great; however,...", "content": "In a Rails application I am working on, I needed to setup a form with a field with a non-standard behaviour. The field represents a Date object, so the date_select FormHelper looked great; however, the date to display was not the actual date to be set on the database, but the day before. Changing all the data on the DB was a bit risky, so I had to stick with this requirement.I decided to use a virtual attribute to do this, as it seemed the most elegant solution, so I wrote this in my model:# user_subscription.rbdef expire_date_minus_one_day self.expire_date - 1.dayenddef expire_date_minus_one_day= date self.expire_date = date + 1.day endAnd this in my view: &lt;p&gt; &lt;%= f.label :expire_date %&gt; &lt;%= f.date_select :expire_date_minus_one_day %&gt; &lt;/p&gt;However, trying to send this data to the controller resulted in a ‚Äú1 error(s) on assignment of multiparameter attributes‚Äù error.The solution I found after some search was this one:# user_subscription.rb composed_of :expire_date_minus_one_day, :class_name =&gt; 'Date', :mapping =&gt; %w(Date to_s), :constructor =&gt; Proc.new{ |item| item }, :converter =&gt; Proc.new{ |item| item }Reference: http://gabeodess.heroku.com/posts/14" }, { "title": "Machinist vs Factory Girl: Machinist win!", "url": "/posts/machinist-vs-factory-girl-machinist-win/", "categories": "posts, technical", "tags": "db, factorygirl, machinist, rails, rspec, test", "date": "2011-06-19 02:00:00 +0200", "snippet": "Today I decided to verify if Machinist could be a good replacement for Factory Girl. In our project, we have a big problem with Factory Girl: even if you tell her not to hit the database, using the...", "content": "Today I decided to verify if Machinist could be a good replacement for Factory Girl. In our project, we have a big problem with Factory Girl: even if you tell her not to hit the database, using the Factory.build method, if an object has associations, these are saved on the DB. And this causes a huge slowdown in specs using factories. We‚Äôve been using Factory Girl for nearly two years, and if we could find a way to stop him hitting the DB, we could really have a huge improvent in our test suite running time.To verify if Machinist could perform better, I set up a basic rails app. Look at this example:# person.rb validates_presence_of :address# person_factory.rb Factory.define :person do |p| p.name 'John' p.surname 'Doe' p.association :address end# person_spec.rbit \"builds a valid person with factory girl\" do Factory.build(:person).should be_validendIf you run tail -f log/test.log and you run this spec, you‚Äôll see something like this: AREL (0.5ms) INSERT INTO \"addresses\" (\"country\", \"planet\", \"created_at\",\"updated_at\") VALUES ('Italy', 'Earth', '2011-06-18 16:45:00.268423','2011-06-18 16:45:00.268423')The Factory.build method has to save dependencies on the DB to set the foreign keys on the objects and validate them.Let‚Äôs try with machinist:# person.rb validates_presence_of :address# blueprints.rb Person.blueprint do name { \"John\" } surname { \"Doe\" } address { Address.make } end# person_spec.rbit \"builds a valid person with machinist\" do Person.make.should be_validendThis time, running tail on the test.log file and running the spec, doesn‚Äôt shown any DB hit, and of yeah, we have a green test.I verified this also by putting a debugger line after the validation and inspecting the DB from within the debugger after the validation has run - with FactoryGirl, it revealed an Address object saved on the DB, while with Mechanist it didn‚Äôt.I still haven‚Äôt looked inside machinist to show how it handles this, but I‚Äôll do it soon, so stay tuned!" }, { "title": "Howto run a rake task in sandbox mode", "url": "/posts/howto-run-a-rake-task-in-sandbox-mode/", "categories": "posts, technical", "tags": "rake, rails, db, rollback, activerecord", "date": "2011-03-10 01:00:00 +0100", "snippet": "If you have a Rails rake task that somehow changes your DB data, but you want to be sure that the DB will be rolled back to its previous state after the rake task has completed, you can simply incl...", "content": "If you have a Rails rake task that somehow changes your DB data, but you want to be sure that the DB will be rolled back to its previous state after the rake task has completed, you can simply include this snippet right after your task definition:ActiveRecord::Base.connection.increment_open_transactionsActiveRecord::Base.connection.begin_db_transactionat_exit do ActiveRecord::Base.connection.rollback_db_transaction ActiveRecord::Base.connection.decrement_open_transactionsendIf you wonder where is this code coming from, it‚Äôs directly from the rails console code." }, { "title": "Rails 3 scopes with HABTM (has and belongs to many) relations", "url": "/posts/rails-3-scopes-with-habtm-has-and-belongs-to-many-relations/", "categories": "posts, technical", "tags": "rails, rails3, activerecord, habtm, scopes", "date": "2011-01-28 01:00:00 +0100", "snippet": "There are already many posts about this, but maybe this simple example will help you understand this subject even better.# First model: tag.rb# note that pomodori is a custom plural for pomodorocla...", "content": "There are already many posts about this, but maybe this simple example will help you understand this subject even better.# First model: tag.rb# note that pomodori is a custom plural for pomodoroclass Tag &lt; ActiveRecord::Base has_and_belongs_to_many :pomodoriend# Second model: pomodoro.rb# here is how to define a Rails 3 scope through the join table:class Pomodoro &lt; ActiveRecord::Base has_and_belongs_to_many :tags scope :by_tag, lambda { |tag_text| joins(\"join pomodori_tags, tags\"). where('pomodori.id = pomodori_tags.pomodoro_id AND pomodori_tags.tag_id = tags.id AND tags.text = ?', tag_text) }end" }, { "title": "invalid option: with pg dir=/opt/PostgreSQL/9.0", "url": "/posts/invalid-option-with-pg-diroptpostgresql90/", "categories": "posts, technical", "tags": "postgresql, ruby, gem, rubygems, pg, tricks, tips", "date": "2011-01-18 01:00:00 +0100", "snippet": "I‚Äôd bet a lot of ruby devs actually found themselves stuck in this problem. You checkout a github repo, you run a bundle install and - duh - a gem cannot install because of a missing library.You‚Äôre...", "content": "I‚Äôd bet a lot of ruby devs actually found themselves stuck in this problem. You checkout a github repo, you run a bundle install and - duh - a gem cannot install because of a missing library.You‚Äôre sure you‚Äôve already installed the library or dependency or whatever, but in a different path from the standard one (in this example I‚Äôm talking about PostgreSQL installed via the graphical installer instead of the ubuntu apt repo); so you issue the commandgem install pg -v0.9.0 --with-pg-dir=/opt/PostgreSQL/9.0And you get this error message:invalid option: --with-pg-dir=/opt/PostgreSQL/9.0What‚Äôs the problem? You need to separate options with another pair of dashes:gem install pg -v0.9.0 -- --with-pg-dir=/opt/PostgreSQL/9.0And everything will work." }, { "title": "Format the results of a MySQL query like MySQL! In Rails!", "url": "/posts/format-the-results-of-a-mysql-query-like-mysql-in-rails/", "categories": "posts, technical", "tags": "ruby, mysql, rails, table, terminal-table", "date": "2010-09-30 02:00:00 +0200", "snippet": "It may happen that you need to display the results of a MySQL query on a page. E.g., your customer asks you to add a report on a page, and you don‚Äôt want to build a custom template, but just write ...", "content": "It may happen that you need to display the results of a MySQL query on a page. E.g., your customer asks you to add a report on a page, and you don‚Äôt want to build a custom template, but just write the query and see the results.We can do this easily thanks to the terminal-table gem (see http://github.com/visionmedia/terminal-table. This gem allows printing an ASCII table, just like the one you see when you use MySQL from the terminal. Look at its page on GitHub to see how easy it is.To integrate it with MySQL and Rails, we can use ActiveRecord::Base.connection.execute(\"some_sql_query\"). This method extracts the result of our query to a Mysql::Result object, which consists of a set of hashes with the results of the query. We can navigate through this hashes iterating over the all_hashes method, and throw these results into a table. Here‚Äôs the code:module MysqlQueryResultsFormatter require 'terminal-table/import' def print_results_of_query query result = ActiveRecord::Base.connection.execute(query) return nil if result.nil? results_table = table do |t| results = result.all_hashes t.headings = results.first.keys results.each do |each_row| t &lt;&lt; each_row.values end end puts results_table endendSo all we need to do is include our module and call the method print_results_of_query.Just wrap it into &lt;%= and %&gt; markers in your .html.erb template. Have fun!" }, { "title": "Vim for Rails Developers, by Ben Orenstein", "url": "/posts/screencast-review-vim-for-rails-developers-by-ben-orenstein/", "categories": "posts, technical", "tags": "vim, rails, screencast, textmate, review, ben orentsein", "date": "2010-07-02 02:00:00 +0200", "snippet": "Codeulate ScreencastsIn the last months I‚Äôve been working on a Rails project in an Agile team. I worked mostly on TextMate, and its speed is really amazing. It has a full set of features, with snip...", "content": "Codeulate ScreencastsIn the last months I‚Äôve been working on a Rails project in an Agile team. I worked mostly on TextMate, and its speed is really amazing. It has a full set of features, with snippets, bundles, syntaxes and so on. It has many shortcuts, and apparently there‚Äôs no need to switch away from TextMate.But, it has its drawbacks: it‚Äôs a Mac only application, so I can‚Äôt use it on my Linux box. Also, it‚Äôs a commercial application, and even if its cost is not too high, I don‚Äôt like to pay for software. Finally, it‚Äôs a GUI application, and it cannot be used over SSH to work on a production machine.VIM always looked like the perfect answer to these needs - but yet, getting the productivity I reached after one full year of TextMate requires some time. Every time I tried using VIM for some serious work, I ended up discouraged, because even the most basic stuff like file navigation and launching tests took ages, compared to the snap of fingers of TextMate.I always like to challenge me though, so when I saw this screencast by Ben Orenstein I immediately decided to give it a try. And yes, it was a good decision!The screencast begins with some general hints about typing speed, keyboard layouts and Dvorak keyboards. Even if it may not look strictly related to the main subject of the screencast, I appreciated this part, and I think many people will find it useful.Then the video moves on to the vim-rails plugin by Tim Pope and highlights its main functionalities. Here you‚Äôll see clearly how this screencast is mostly intended to tell ‚Äústuff that matters‚Äù instead of just giving a plain list of features that you‚Äôll never use in ages.In this section, the screencast shows how to launch tests, navigate between files, and execute Rake commands directly from your VIM session. I think this plugin has really a lot of features, too many to be covered in this screencast; Ben managed to make a good choice, selecting the fundamentals you‚Äôll use everyday.Another amazing plugin is Snipmate: it allows to insert snippets of code by just inserting a few characters and hitting TAB. Ben quickly overviews it and shows its use - another must-have for TextMate aficionados like me ;)After this follows a section about ctags and their integration with Rails and VIM. This is also really useful, and combined with rails-vim it provides a quick way to navigate between project files.Finally, there‚Äôs an overview of ACK - a grep replacement, focused on ease of use and speed - and its simple VIM integration. I‚Äôm also using Ack.mate, so I already knew it, and it‚Äôs one of those tools you feel the lack of when you don‚Äôt find it installed.Before ending the screencast, Ben also shows an overviews of single commands and configurations that he finds particularly useful. Again, they‚Äôre being selected with usefulness in mind, so you‚Äôll end up with that ‚ÄúWow, I need to try these now!‚Äù wonderful sensation.What else can I say? The screencast is well done, has a nice music, a simple and clean layout and it‚Äôs spoken in a clear English ;) This should be obvious but I‚Äôve found a lot of screencasts with crazily fast voices, so it‚Äôs not so obvious :)To improve this screencast, I have nothing to say about its content: it‚Äôs really great! I would only add some OSD with keys when key combinations are being explained, so that it could be even simpler to memorize them.I would definitely recommend this to any Rails developer wanting to try VIM, or to any VIM user who is starting to code Rails and wants to boost his productivity. It has a good amount of tricks and hints that can be useful both for the VIM neophyte and the VIM master starting a Rails project." }, { "title": "TextMate Syntax Highlighting Howto: A simple todo list", "url": "/posts/textmate-syntax-highlighting-howto-a-simple-todo-list/", "categories": "posts, technical", "tags": "textmate, syntax, todo, howto", "date": "2010-05-14 02:00:00 +0200", "snippet": "Today I wanted to add a syntax highlight for my todo list favourite format to TextMate.Here‚Äôs how to do it. In TextMate, go to Bundles, then Bundles Editor, then Edit Languages‚Ä¶Click on the plus bu...", "content": "Today I wanted to add a syntax highlight for my todo list favourite format to TextMate.Here‚Äôs how to do it. In TextMate, go to Bundles, then Bundles Editor, then Edit Languages‚Ä¶Click on the plus button in the lower left corner and choose ‚ÄúNew Language‚Äù. Paste the following code in place of the example code provided.{ scopeName = 'todo'; patterns = ( { name = 'todo.completed'; match = '^\\[X+\\]'; }, { name = 'todo.in_progress'; match = '^\\[X*\\.*\\]'; }, { name = 'todo.new'; match = '^\\[.+]'; }, );}This defines three patterns for each condition. They should be self-explanatory, I used only simple regexps here. Save your language definition, and it should appear in the languages combo of your Textmate.To complete syntax highlighting, you also have to add the colors to your current textmate theme. In the application menu, go to Textmate, then Preferences, then Fonts &amp; Colors. For each pattern name, click the plus button and create a new element. It must have the pattern name as scope selector. Choose colors as you like.References: Textmate help Mac dev center" }, { "title": "Ruby Mixin and monkey patching examples", "url": "/posts/ruby-mixin-and-monkey-patching-examples/", "categories": "posts, technical", "tags": "examples, metaprogramming, mixin, ruby, monkey-patching", "date": "2010-04-23 02:00:00 +0200", "snippet": "Let‚Äôs explore a couple of solutions to dynamically add a split_by_half behaviour to an array object. The first technique is the mixin: it allows to add the method to a single array instance. The se...", "content": "Let‚Äôs explore a couple of solutions to dynamically add a split_by_half behaviour to an array object. The first technique is the mixin: it allows to add the method to a single array instance. The second one is called monkey patching, and adds the method directly to the Array class, adding this behaviour to every array instance.######### MIXINmodule SplittableArray def split_by_half middle = (self.size.to_f / 2).floor return [self[0..middle], self[middle+1..self.size]] endendsome_array = [1, 2, 3, 4, 5]some_array.extend SplittableArraysome_array.split_by_half # =&gt; [[1, 2, 3], [4, 5]]######### MONKEY PATCH ARRAYclass Array def split_by_half middle = (self.size.to_f / 2).floor return [self[0..middle], self[middle+1..self.size]] endendanother_array = [6, 7, 8, 9, 10]another_array.split_by_half # =&gt; [[6, 7, 8], [9, 10]]" } ]

<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design on andreaschiavini.com</title><link>https://metalelf0.github.io/tags/design/</link><description>Recent content in Design on andreaschiavini.com</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 02 May 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://metalelf0.github.io/tags/design/index.xml" rel="self" type="application/rss+xml"/><item><title>Command pattern in ruby and rails</title><link>https://metalelf0.github.io/posts/2016-05-02-command-pattern/</link><pubDate>Mon, 02 May 2016 00:00:00 +0000</pubDate><guid>https://metalelf0.github.io/posts/2016-05-02-command-pattern/</guid><description>&lt;h3 id="the-problem">
 The problem
 &lt;a class="heading-link" href="#the-problem">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>If you have a growing Rails application and you feel your models are getting too fat you might have a problem. We&amp;rsquo;ve all been educated with the &amp;ldquo;fat models, thin controllers&amp;rdquo; dogma - but sometimes putting all the domain logic inside the models has its downsides.&lt;/p>
&lt;p>As an example, the typical flow of an &lt;code>ActiveRecord&lt;/code> object through a Rails request involves:&lt;/p></description></item><item><title>Null objects in Rails</title><link>https://metalelf0.github.io/posts/2013-12-23-null-objects-in-rails/</link><pubDate>Mon, 23 Dec 2013 00:00:00 +0000</pubDate><guid>https://metalelf0.github.io/posts/2013-12-23-null-objects-in-rails/</guid><description>&lt;h3 id="the-problem">
 The problem
 &lt;a class="heading-link" href="#the-problem">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>Recently I&amp;rsquo;ve seen in a project I work on a lot of occurrences of this code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">privacy&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">privacy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">enables_page?&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The first part of the condition above is a bad practice in object oriented design. It forces collaborators of &lt;code>user&lt;/code> to know a part of its implementation - it could have a &lt;code>privacy&lt;/code> or it couldn&amp;rsquo;t.&lt;/p>
&lt;h3 id="what-we-want">
 What we want
 &lt;a class="heading-link" href="#what-we-want">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>Wouldn&amp;rsquo;t it be much better to just write this:&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Oo on metalelf0.github.io</title>
    <link>https://metalelf0.github.io/tags/oo/</link>
    <description>Recent content in Oo on metalelf0.github.io</description>
    <generator>Hugo -- 0.138.0</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 May 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://metalelf0.github.io/tags/oo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mocked - a minitest pattern</title>
      <link>https://metalelf0.github.io/posts/old-website/2016-05-11-mocked-a-minitest-pattern/</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      <guid>https://metalelf0.github.io/posts/old-website/2016-05-11-mocked-a-minitest-pattern/</guid>
      <description>&lt;h3 id=&#34;minitest-is-good-for-mocking-right-well&#34;&gt;Minitest is good for mocking, right? Well&amp;hellip;&lt;/h3&gt;
&lt;p&gt;Minitest is gaining a lot of popularity and can actually be a 100% replacement
for RSpec. It&amp;rsquo;s a pure ruby testing framework, it&amp;rsquo;s fast, light weight, and it
supports both a test-unit like syntax and a spec engine with Rspec like syntax.&lt;/p&gt;
&lt;p&gt;Still, when it comes to mocking, it can be a little painful. You have to
initialize mocks and verify them manually after running the code under test.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Command pattern in ruby and rails</title>
      <link>https://metalelf0.github.io/posts/old-website/2016-05-02-command-pattern/</link>
      <pubDate>Mon, 02 May 2016 00:00:00 +0000</pubDate>
      <guid>https://metalelf0.github.io/posts/old-website/2016-05-02-command-pattern/</guid>
      <description>&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;
&lt;p&gt;If you have a growing Rails application and you feel your models are getting too
fat you might have a problem. We&amp;rsquo;ve all been educated with the &amp;ldquo;fat models, thin
controllers&amp;rdquo; dogma - but sometimes putting all the domain logic inside the
models has its downsides.&lt;/p&gt;
&lt;p&gt;As an example, the typical flow of an &lt;code&gt;ActiveRecord&lt;/code&gt; object through a Rails
request involves:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fetching the object from the DB based on the params you receive (controller);&lt;/li&gt;
&lt;li&gt;doing something with the object inside the model (model);&lt;/li&gt;
&lt;li&gt;when something goes wrong, you set errors onto the model attributes (model);&lt;/li&gt;
&lt;li&gt;you finally return the object to the view, and present it accordingly (view).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is gonna tangle a lot of the domain logic to your model (scopes to
retrieve objects, validations, and in the worst case even some presentation
logic).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Null objects in Rails</title>
      <link>https://metalelf0.github.io/posts/old-website/2013-12-23-null-objects-in-rails/</link>
      <pubDate>Mon, 23 Dec 2013 00:00:00 +0000</pubDate>
      <guid>https://metalelf0.github.io/posts/old-website/2013-12-23-null-objects-in-rails/</guid>
      <description>&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;
&lt;p&gt;Recently I&amp;rsquo;ve seen in a project I work on a lot of occurrences of this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;privacy &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;privacy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enables_page?(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first part of the condition above is a bad practice in object oriented
design. It forces collaborators of &lt;code&gt;user&lt;/code&gt; to know a part of its implementation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it could have a &lt;code&gt;privacy&lt;/code&gt; or it couldn&amp;rsquo;t.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-we-want&#34;&gt;What we want&lt;/h3&gt;
&lt;p&gt;Wouldn&amp;rsquo;t it be much better to just write this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;privacy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enables_page?(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hiding the responsibility inside the user class? It would be much cleaner and
follow the &lt;strong&gt;Tell, don&amp;rsquo;t ask&lt;/strong&gt; principle.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

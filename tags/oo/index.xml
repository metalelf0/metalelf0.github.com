<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Oo on metalelf0.github.io</title><link>https://metalelf0.github.io/tags/oo/</link><description>Recent content in Oo on metalelf0.github.io</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 11 May 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://metalelf0.github.io/tags/oo/index.xml" rel="self" type="application/rss+xml"/><item><title>Mocked - a minitest pattern</title><link>https://metalelf0.github.io/posts/2016-05-11-mocked-a-minitest-pattern/</link><pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate><guid>https://metalelf0.github.io/posts/2016-05-11-mocked-a-minitest-pattern/</guid><description>&lt;h3 id="minitest-is-good-for-mocking-right-well">
 Minitest is good for mocking, right? Well&amp;hellip;
 &lt;a class="heading-link" href="#minitest-is-good-for-mocking-right-well">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>Minitest is gaining a lot of popularity and can actually be a 100% replacement for RSpec. It&amp;rsquo;s a pure ruby testing framework, it&amp;rsquo;s fast, light weight, and it supports both a test-unit like syntax and a spec engine with Rspec like syntax.&lt;/p>
&lt;p>Still, when it comes to mocking, it can be a little painful. You have to initialize mocks and verify them manually after running the code under test.&lt;/p></description></item><item><title>Command pattern in ruby and rails</title><link>https://metalelf0.github.io/posts/2016-05-02-command-pattern/</link><pubDate>Mon, 02 May 2016 00:00:00 +0000</pubDate><guid>https://metalelf0.github.io/posts/2016-05-02-command-pattern/</guid><description>&lt;h3 id="the-problem">
 The problem
 &lt;a class="heading-link" href="#the-problem">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>If you have a growing Rails application and you feel your models are getting too fat you might have a problem. We&amp;rsquo;ve all been educated with the &amp;ldquo;fat models, thin controllers&amp;rdquo; dogma - but sometimes putting all the domain logic inside the models has its downsides.&lt;/p>
&lt;p>As an example, the typical flow of an &lt;code>ActiveRecord&lt;/code> object through a Rails request involves:&lt;/p></description></item><item><title>Null objects in Rails</title><link>https://metalelf0.github.io/posts/2013-12-23-null-objects-in-rails/</link><pubDate>Mon, 23 Dec 2013 00:00:00 +0000</pubDate><guid>https://metalelf0.github.io/posts/2013-12-23-null-objects-in-rails/</guid><description>&lt;h3 id="the-problem">
 The problem
 &lt;a class="heading-link" href="#the-problem">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>Recently I&amp;rsquo;ve seen in a project I work on a lot of occurrences of this code:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff;font-weight:bold">if&lt;/span> user.privacy &amp;amp;&amp;amp; user.privacy.enables_page?(...)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>The first part of the condition above is a bad practice in object oriented design. It forces collaborators of &lt;code>user&lt;/code> to know a part of its implementation - it could have a &lt;code>privacy&lt;/code> or it couldn&amp;rsquo;t.&lt;/p></description></item></channel></rss>
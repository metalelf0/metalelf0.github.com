<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vim on andreaschiavini.com</title><link>https://metalelf0.github.io/tags/vim/</link><description>Recent content in Vim on andreaschiavini.com</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 19 Dec 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://metalelf0.github.io/tags/vim/index.xml" rel="self" type="application/rss+xml"/><item><title>Vim - Change Colorscheme Based on Iterm profile</title><link>https://metalelf0.github.io/posts/2016-12-19-change-vim-colorscheme-based-on-iterm/</link><pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate><guid>https://metalelf0.github.io/posts/2016-12-19-change-vim-colorscheme-based-on-iterm/</guid><description>&lt;p>I like to change my (neo)vim colorscheme quite frequently, and when I do I want it to match my iterm colors. Many colorscheme authors also provide an iterm color palette, so you can import the &lt;code>.itermcolors&lt;/code> file, create a new iterm profile with that palette, start a new session and you have the same vim colorscheme in your iterm. But then, when you launch vim, you still have to type &lt;code>:colorscheme somecolor&lt;/code>.&lt;/p></description></item><item><title>Vim - sort ruby methods by name</title><link>https://metalelf0.github.io/posts/2016-07-29-vim-sort-ruby-methods-by-name/</link><pubDate>Fri, 29 Jul 2016 00:00:00 +0000</pubDate><guid>https://metalelf0.github.io/posts/2016-07-29-vim-sort-ruby-methods-by-name/</guid><description>&lt;p>Yesterday I had to refactor a very large ruby class. It had a lot of methods and, to make it cleaner, I decided to sort methods alphabetically.&lt;/p>
&lt;p>Is there a way to do this in vim? Of course there is, and it&amp;rsquo;s quite tricky - so let&amp;rsquo;s see how we can do it.&lt;/p>
&lt;p>The basic idea is taken from &lt;a href="https://wincent.com/wiki/Sorting_functions_by_name_in_Vim" class="external-link" target="_blank" rel="noopener">this post on wincent.com&lt;/a>, I just adapted it for ruby. All credits to this guy for his work :)&lt;/p></description></item><item><title>Vim regexp example: make a variable out of params</title><link>https://metalelf0.github.io/posts/2012-07-09-vim-regexp-example/</link><pubDate>Mon, 09 Jul 2012 00:00:00 +0000</pubDate><guid>https://metalelf0.github.io/posts/2012-07-09-vim-regexp-example/</guid><description>&lt;p>Today I wrote a regexp to change &lt;code>params[:page]&lt;/code> into &lt;code>page&lt;/code>. Here you are:&lt;/p>
&lt;pre>&lt;code>:'&amp;lt;,'&amp;gt;s/params\[:\(\p\{-}\)\]/\1/g
&lt;/code>&lt;/pre>
&lt;p>Let&amp;rsquo;s explain it briefly:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>the first part, &lt;code>:'&amp;lt;,'&amp;gt;s/&lt;/code>, is the vim command to substitute a pattern (or a regexp) with another one. The &lt;code>&amp;lt;,'&amp;gt;&lt;/code> part tells vim to operate on the visually selected text.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>the second part is the trickiest one. Let&amp;rsquo;s see it part to part:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>params\[:&lt;/code> is the first part of the string we want to match. the &lt;code>\&lt;/code> is used to escape the &lt;code>[&lt;/code> character.&lt;/p></description></item><item><title>Add bundle dir to your ctags</title><link>https://metalelf0.github.io/posts/2012-03-26-add-bundle-dir-to-your-ctags/</link><pubDate>Mon, 26 Mar 2012 00:00:00 +0000</pubDate><guid>https://metalelf0.github.io/posts/2012-03-26-add-bundle-dir-to-your-ctags/</guid><description>&lt;p>Ctags are a great way to improve navigation between large codebases. Used together with vim they allow to quickly jump to any method definition with just a keystroke - &lt;code>C-]&lt;/code>. Adding your bundle dir when generating the tags file will allow jumping to the internals of the ruby gems you are using. Let&amp;rsquo;s see how to do this.&lt;/p>
&lt;p>The setup needed is the following:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>install &lt;a href="http://http://ctags.sourceforge.net" class="external-link" target="_blank" rel="noopener">Exuberant Ctags&lt;/a>. I suggest using &lt;code>brew install ctags&lt;/code>, and remember to fix your &lt;code>$PATH&lt;/code> so that running &lt;code>ctags --version&lt;/code> shows &lt;code>Exuberant Ctags&lt;/code>.&lt;/p></description></item><item><title>The right colors for your VIM</title><link>https://metalelf0.github.io/posts/2012-02-06-the-right-colors-for-your-vim/</link><pubDate>Mon, 06 Feb 2012 00:00:00 +0000</pubDate><guid>https://metalelf0.github.io/posts/2012-02-06-the-right-colors-for-your-vim/</guid><description>&lt;p>I have a lot of Vim colorschemes, and I like to change them very often, reflecting my mood. I needed a way to showcase them all and quickly pick one.&lt;/p>
&lt;p>The original &lt;a href="https://code.google.com/p/vimcolorschemetest/" class="external-link" target="_blank" rel="noopener">Vim Color Scheme Test&lt;/a> script by maverick.woo is written in Perl and the build works on Windows systems. I wanted to add some new features, and to test it with my own colorschemes, but as I&amp;rsquo;m not very confident with Perl, I preferred to start over with a new Ruby version instead of forking his project. Here&amp;rsquo;s my version (and here&amp;rsquo;s the &lt;a href="https://github.com/metalelf0/VimColorSchemeTest-Ruby" class="external-link" target="_blank" rel="noopener">github page&lt;/a>):&lt;/p></description></item><item><title>Vim for Rails Developers, by Ben Orenstein</title><link>https://metalelf0.github.io/posts/2010-07-02-screencast-review---vim-for-rails-developers-by-ben-orenstein/</link><pubDate>Fri, 02 Jul 2010 00:00:00 +0000</pubDate><guid>https://metalelf0.github.io/posts/2010-07-02-screencast-review---vim-for-rails-developers-by-ben-orenstein/</guid><description>&lt;p>&lt;a href="http://www.codeulatescreencasts.com" class="external-link" target="_blank" rel="noopener">Codeulate Screencasts&lt;/a>&lt;/p>
&lt;p>In the last months I&amp;rsquo;ve been working on a Rails project in an Agile team. I worked mostly on TextMate, and its speed is really amazing. It has a full set of features, with snippets, bundles, syntaxes and so on. It has many shortcuts, and apparently there&amp;rsquo;s no need to switch away from TextMate.&lt;/p>
&lt;p>But, it has its drawbacks: it&amp;rsquo;s a Mac only application, so I can&amp;rsquo;t use it on my Linux box. Also, it&amp;rsquo;s a commercial application, and even if its cost is not too high, I don&amp;rsquo;t like to pay for software. Finally, it&amp;rsquo;s a GUI application, and it cannot be used over SSH to work on a production machine.&lt;/p></description></item></channel></rss>